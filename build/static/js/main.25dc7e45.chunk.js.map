{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoList","useState","todos","setTodos","updateTodos","axios","get","then","response","data","length","catch","err","console","log","useEffect","className","id","map","todo","Todo","key","_id","completed","complete","AddTodo","props","patch","result","status","deleteTodo","delete","text","onClick","setTodo","type","onChange","e","target","value","placeholder","post","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4PAaA,SAASA,IAAW,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,KAGXC,EAAc,WAClBC,IAAMC,IAAI,UAAUC,MAAK,SAAAC,GACpBA,EAASC,KAAKC,OAAS,EACxBP,EAASK,EAASC,MAElBN,EAAS,OAEVQ,OAAM,SAAAC,GACPC,QAAQC,IAAI,QAAQF,OAQxB,OAJAG,qBAAU,WACRX,MACC,IAGD,yBAAKY,UAAU,QACb,wBAAIC,GAAG,QAAP,UACCf,EAAMQ,OAAS,EAAI,oEAAgDR,GAASA,EAAMgB,KAAI,SAAAC,GAAI,OACzF,kBAACC,EAAD,CAAMC,IAAKF,EAAKG,IAAKH,KAAMA,EAAMf,YAAaA,EAAamB,UAAWJ,EAAKK,cAE7E,kBAACC,EAAD,CAAStB,SAAUA,EAAUC,YAAaA,KAKhD,SAASgB,EAAKM,GACZ,IAAMP,EAAOO,EAAMP,KAEbK,EAAW,WACfnB,IAAMsB,MAAN,oBAAyBR,EAAKG,MAAOf,MAAK,SAAAqB,GACnB,MAAlBA,EAAOC,QACRH,EAAMtB,iBAEPO,OAAM,SAAAC,GACPC,QAAQC,IAAIF,OAIVkB,EAAa,WACjBzB,IAAM0B,OAAN,gBAAsBZ,EAAKG,MAAOf,MAAK,SAAAqB,GAChB,MAAlBA,EAAOC,QACRH,EAAMtB,iBAEPO,OAAM,SAAAC,GACPC,QAAQC,IAAIF,OAIhB,OAAGc,EAAMH,UAEL,yBAAKP,UAAU,yBACb,8BAAOG,EAAKa,MACZ,yBAAKhB,UAAU,WACb,4BAAQC,GAAG,cAAcgB,QAAST,GAAlC,YACA,4BAAQP,GAAG,YAAYgB,QAASH,GAAhC,SAMJ,yBAAKd,UAAU,eACb,8BAAOG,EAAKa,MACZ,yBAAKhB,UAAU,WACb,4BAAQC,GAAG,cAAcgB,QAAST,GAAlC,YACA,4BAAQP,GAAG,YAAYgB,QAASH,GAAhC,SAOV,SAASL,EAAQC,GAAO,IAAD,EACGzB,mBAAS,IADZ,mBACdkB,EADc,KACRe,EADQ,KAqBrB,OACE,yBAAKlB,UAAU,WACb,yBAAKC,GAAG,YACN,sCACA,2BAAOD,UAAU,QAAQmB,KAAK,OAAOC,SAtB1B,SAACC,GAChBH,EAAQG,EAAEC,OAAOC,QAqB4CA,MAAOpB,EAAMqB,YAAY,8BAEpF,4BAAQvB,GAAG,SAASgB,QApBZ,WACR5B,IAAMoC,KAAK,QAAS,CACpBT,KAAOb,IACNZ,MAAK,SAAAqB,GACe,MAAlBA,EAAOC,SACRH,EAAMtB,cACNS,QAAQC,IAAIc,GACZM,EAAQ,QAETvB,OAAM,SAAAC,GACPC,QAAQC,IAAIF,OAUsB8B,SAAUvB,EAAKT,OAAS,GAA1D,cAKSiC,MApHf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAChB,EAAD,QCIc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.25dc7e45.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nfunction TodoList(){\n  const [todos, setTodos] = useState('');\n\n  const updateTodos = () => {\n    axios.get('/todos').then(response => {\n      if(response.data.length > 0){\n        setTodos(response.data);\n      } else {\n        setTodos('');\n      }\n    }).catch(err => {\n      console.log('err: ',err);\n    })\n  }\n\n  useEffect(() => {\n    updateTodos();\n  }, []);\n\n  return(\n    <div className=\"todo\">\n      <h1 id='head'>To do:</h1>\n      {todos.length < 1 ? <h3>No Todos to display, Please add some</h3> : todos && todos.map(todo => (\n        <Todo key={todo._id} todo={todo} updateTodos={updateTodos} completed={todo.complete}/>\n      ))}\n      <AddTodo setTodos={setTodos} updateTodos={updateTodos}/>\n    </div>\n  )\n}\n\nfunction Todo(props){\n  const todo = props.todo;\n\n  const complete = () => {\n    axios.patch(`/complete/${todo._id}`).then(result => {\n      if(result.status === 200){\n        props.updateTodos();\n      }\n    }).catch(err => {\n      console.log(err);\n    })\n  }\n\n  const deleteTodo = () => {\n    axios.delete(`/todo/${todo._id}`).then(result => {\n      if(result.status === 200){\n        props.updateTodos();\n      }\n    }).catch(err => {\n      console.log(err);\n    })\n  }\n\n  if(props.completed){\n    return(\n      <div className='todoElement completed'>\n        <span>{todo.text}</span>\n        <div className='buttons'>       \n          <button id='completeBtn' onClick={complete}> √ </button>     \n          <button id='deleteBtn' onClick={deleteTodo}> X </button>\n      </div>\n     </div>\n    )\n  }else{\n    return(\n      <div className='todoElement'>\n        <span>{todo.text}</span>\n        <div className='buttons'>       \n          <button id='completeBtn' onClick={complete}> √ </button>     \n          <button id='deleteBtn' onClick={deleteTodo}> X </button>\n      </div>\n     </div>\n    )\n  }\n}\n\nfunction AddTodo(props){\n  const [todo, setTodo] = useState('');\n\n  const onChange = (e) => {\n    setTodo(e.target.value);\n  }\n\n  const add = () => {\n      axios.post('/todo', {\n      text : todo\n    }).then(result => {\n      if(result.status === 201){\n        props.updateTodos();\n        console.log(result);\n        setTodo('');\n      }\n    }).catch(err => {\n      console.log(err);\n    })\n  }\n\n  return(\n    <div className='addTodo'>\n      <div id='AddInput'>\n        <h4>Task: </h4>\n        <input className='input' type='text' onChange={onChange} value={todo} placeholder='What Do You Need To Do ?'/>\n      </div>\n      <button id='addBtn' onClick={add} disabled={todo.length < 1}>Save Item</button>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}